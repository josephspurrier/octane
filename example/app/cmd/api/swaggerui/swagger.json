{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API for the Octane sample application.\n\nSwagger 2.0 Spec - generated by [go-swagger](https://github.com/go-swagger/go-swagger)",
    "title": "Octane Sample Application",
    "version": "1.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "description": "You can use this endpoint as a healthcheck for a load balancer.",
        "tags": [
          "healthcheck"
        ],
        "summary": "Returns an OK message to show the application is functioning.",
        "operationId": "HealthcheckGET",
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Authenticate a user.",
        "operationId": "UserLogin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "Email address.",
                  "type": "string",
                  "x-go-name": "Email",
                  "example": "jsmith@example.com"
                },
                "password": {
                  "description": "Password.",
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/v1/note": {
      "post": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "Create a note.",
        "operationId": "NoteCreate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-go-name": "Message"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/NoteCreateReponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/v1/note/{note_id}": {
      "delete": {
        "security": [
          {
            "token": []
          },
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "List notes.",
        "operationId": "NoteDestroy",
        "responses": {
          "200": {
            "$ref": "#/responses/NoteShowResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/v1/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Register a user.",
        "operationId": "UserRegister",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "first_name",
                "last_name",
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "Email address.",
                  "type": "string",
                  "x-go-name": "Email",
                  "example": "jsmith@example.com"
                },
                "first_name": {
                  "description": "First name.",
                  "type": "string",
                  "x-go-name": "FirstName",
                  "example": "John"
                },
                "last_name": {
                  "description": "Last name.",
                  "type": "string",
                  "x-go-name": "LastName",
                  "example": "Smith"
                },
                "password": {
                  "description": "Password.",
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/RegisterResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "responses": {
    "BadRequestResponse": {
      "description": "BadRequestResponse is a failure.",
      "schema": {
        "type": "object",
        "required": [
          "message",
          "status_code",
          "status_message"
        ],
        "properties": {
          "message": {
            "description": "Message contains a user friendly message.",
            "type": "string",
            "x-go-name": "Message",
            "example": "The data submitted was invalid."
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 400
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "Bad Request"
          }
        }
      }
    },
    "InternalServerErrorResponse": {
      "description": "InternalServerErrorResponse is a failure.",
      "schema": {
        "type": "object",
        "required": [
          "message",
          "status_code",
          "status_message"
        ],
        "properties": {
          "message": {
            "description": "Message contains a user friendly message.",
            "type": "string",
            "x-go-name": "Message",
            "example": "An unexpected error occurred in the application."
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 500
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "Internal Server Error"
          }
        }
      }
    },
    "LoginResponse": {
      "description": "LoginResponse returns a token.",
      "schema": {
        "type": "object",
        "required": [
          "status_code",
          "status_message"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "description": "Token contains the API token for authentication",
                "type": "string",
                "x-go-name": "Token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiIwNWE3ZjlmYS1mN2ViLTIzNmItYjJiYi1iYTE0NWUwYTRhMmQiLCJleHAiOjE2MDU2MTQ1NzEsImp0aSI6IjA0MjQ0Yzc4LTU5MzItYTBjZS1lMjAzLTc3MmNiMDVhYmFhZiIsImlhdCI6MTYwNTU4NTc3MSwibmJmIjoxNjA1NTg1NzcxfQ.kAeCynxCh35moPf5OEsn7LW0oHNEBVWxVOiZ6RdyUwk"
              }
            },
            "x-go-name": "Data"
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 200
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "OK"
          }
        }
      }
    },
    "NotFoundResponse": {
      "description": "NotFoundResponse is a failure.",
      "schema": {
        "type": "object",
        "required": [
          "message",
          "status_code",
          "status_message"
        ],
        "properties": {
          "message": {
            "description": "Message contains a user friendly message.",
            "type": "string",
            "x-go-name": "Message",
            "example": "The page was not found."
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 404
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "Not Found"
          }
        }
      }
    },
    "NoteCreateReponse": {
      "description": "NoteCreateReponse returns a user ID.",
      "schema": {
        "type": "object",
        "required": [
          "status_code",
          "status_message"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "record_id"
            ],
            "properties": {
              "record_id": {
                "description": "RecordID contains the newly created note ID.",
                "type": "string",
                "x-go-name": "RecordID",
                "example": "314445cd-e9fb-4c58-58b6-777ee06465f5"
              }
            },
            "x-go-name": "Data"
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 201
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "Created"
          }
        }
      }
    },
    "OKResponse": {
      "description": "OKResponse is a success.",
      "schema": {
        "type": "object",
        "required": [
          "status_code",
          "status_message",
          "message"
        ],
        "properties": {
          "message": {
            "description": "Message contains a user friendly message.",
            "type": "string",
            "x-go-name": "Message",
            "example": "The operation was successful."
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 200
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "OK"
          }
        }
      }
    },
    "RegisterResponse": {
      "description": "RegisterResponse returns a user ID.",
      "schema": {
        "type": "object",
        "required": [
          "status_code",
          "status_message"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "record_id"
            ],
            "properties": {
              "record_id": {
                "description": "RecordID contains the newly created user ID.",
                "type": "string",
                "x-go-name": "RecordID",
                "example": "314445cd-e9fb-4c58-58b6-777ee06465f5"
              }
            },
            "x-go-name": "Data"
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 201
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "Created"
          }
        }
      }
    },
    "UnauthorizedResponse": {
      "description": "UnauthorizedResponse is a failure.",
      "schema": {
        "type": "object",
        "required": [
          "message",
          "status_code",
          "status_message"
        ],
        "properties": {
          "message": {
            "description": "Message contains a user friendly message.",
            "type": "string",
            "x-go-name": "Message",
            "example": "You are not authorized to view this page."
          },
          "status_code": {
            "description": "Code contains the HTTP status code.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "StatusCode",
            "example": 401
          },
          "status_message": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "StatusMessage",
            "example": "Unauthorized"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "description": "In the 'Value' textbox below, please enter in the word 'Bearer', a space, and then paste in your token.",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}